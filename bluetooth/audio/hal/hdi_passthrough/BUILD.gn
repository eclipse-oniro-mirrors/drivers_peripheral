# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")

declare_args() {
  drivers_peripheral_bluetooth_a2dp_hdi = false
}

config("hdi_audio_config") {
  visibility = [ ":*" ]

  cflags = [
    "-fPIC",
    "-Wall",
    "-Wextra",
    "-Werror",
    "-DGST_DISABLE_DEPRECATED",
    "-DHAVE_CONFIG_H",
    "-fno-strict-aliasing",
    "-Wno-builtin-requires-header",
    "-Wno-int-conversion",
    "-Wno-unused-parameter",
    "-Wno-thread-safety-attributes",
    "-Wno-inconsistent-missing-override",
    "-fno-rtti",
    "-fno-exceptions",
    "-ffunction-sections",
    "-fdata-sections",
    "-Oz",
    "-flto",
  ]

  ldflags = [ "-Wl" ]
}

ohos_shared_library("hdi_audio_bluetooth") {
  if (drivers_peripheral_bluetooth_a2dp_hdi) {
    defines = [ "A2DP_HDI_SERVICE" ]
  }

  sources = [
    "//third_party/cJSON/cJSON.c",
    "src/audio_adapter.cpp",
    "src/audio_adapter_info_common.cpp",
    "src/audio_bluetooth_manager.cpp",
    "src/audio_common.cpp",
    "src/audio_manager.cpp",
    "src/audio_render.cpp",
    "src/bluetooth_a2dp_audio_src_observer_stub.cpp",
    "src/bluetooth_a2dp_src_observer.cpp",
    "src/fast_audio_render.cpp",
    "src/audio_capture.cpp",
  ]

  include_dirs = [
    "//drivers/peripheral/bluetooth/audio/hal/hdi_passthrough/include",
    "//drivers/peripheral/bluetooth/audio/supportlibs/adm_adapter/include",
  ]

  deps = []

  if (is_standard_system) {
    external_deps = [
      "drivers_interface_bluetooth:hdi_audio_bluetooth_header",
      "hdf_core:libhdf_host",
      "hdf_core:libhdf_ipc_adapter",
      "hdf_core:libhdf_utils",
      "hdf_core:libhdi",
      "hilog:libhilog",
      "cJSON:cjson",
    ]
  } else {
    external_deps = [ "hilog:libhilog" ]
  }
  external_deps += [
    "c_utils:utils",
    "hitrace:hitrace_meter",
    "ipc:ipc_single",
    "samgr:samgr_proxy",
  ]

  if(!drivers_peripheral_bluetooth_a2dp_hdi) {
    external_deps += [
      "bluetooth:btframework",
      "bluetooth:btcommon",
    ]
  }

  public_configs = [ ":hdi_audio_config" ]
  version_script = "libhdi_audio_bluetooth_version_script.txt"
  install_images = [ chipset_base_dir ]
  subsystem_name = "hdf"
  part_name = "drivers_peripheral_bluetooth"
}
