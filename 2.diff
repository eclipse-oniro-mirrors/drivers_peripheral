diff --git a/codec/hal/idl_service/BUILD.gn b/codec/hal/idl_service/BUILD.gn
index 65ce6b2d8..57070bbad 100644
--- a/codec/hal/idl_service/BUILD.gn
+++ b/codec/hal/idl_service/BUILD.gn
@@ -13,7 +13,7 @@
 import("//build/ohos.gni")
 import("../..//codec.gni")
 
-ohos_shared_library("libcodec_component_manager_service_1.0") {
+ohos_shared_library("libcodec_component_manager_service_2.0") {
   include_dirs = [
     "../../interfaces/include/",
     "../../utils/include/",
@@ -78,13 +78,13 @@ ohos_shared_library("libcodec_driver") {
 
   sources = [ "src/codec_component_manager_driver.cpp" ]
 
-  deps = [ ":libcodec_component_manager_service_1.0" ]
+  deps = [ ":libcodec_component_manager_service_2.0" ]
 
   if (is_standard_system) {
     external_deps = [
       "c_utils:utils",
       "drivers_interface_codec:codec_idl_headers",
-      "drivers_interface_codec:libcodec_stub_1.0",
+      "drivers_interface_codec:libcodec_stub_2.0",
       "graphic_chipsetsdk:buffer_handle",
       "hdf_core:libhdf_host",
       "hdf_core:libhdf_ipc_adapter",
@@ -108,7 +108,7 @@ ohos_shared_library("libcodec_driver") {
 
 group("codec_idl_omx_service") {
   deps = [
-    ":libcodec_component_manager_service_1.0",
+    ":libcodec_component_manager_service_2.0",
     ":libcodec_driver",
   ]
 }
diff --git a/codec/hal/idl_service/include/codec_component_config.h b/codec/hal/idl_service/include/codec_component_config.h
index e8f2db9d2..91580f00a 100644
--- a/codec/hal/idl_service/include/codec_component_config.h
+++ b/codec/hal/idl_service/include/codec_component_config.h
@@ -16,9 +16,9 @@
 #ifndef CODEC_CONFIG_H
 #define CODEC_CONFIG_H
 #include <refbase.h>
-#include "v1_0/codec_types.h"
+#include "v2_0/codec_types.h"
 #include "device_resource_if.h"
-using OHOS::HDI::Codec::V1_0::CodecCompCapability;
+using OHOS::HDI::Codec::V2_0::CodecCompCapability;
 namespace OHOS {
 namespace Codec {
 namespace Omx {
diff --git a/codec/hal/idl_service/include/codec_component_manager_service.h b/codec/hal/idl_service/include/codec_component_manager_service.h
index d0bcf5451..e23559a87 100644
--- a/codec/hal/idl_service/include/codec_component_manager_service.h
+++ b/codec/hal/idl_service/include/codec_component_manager_service.h
@@ -13,20 +13,20 @@
  * limitations under the License.
  */
 
-#ifndef OHOS_HDI_CODEC_V1_0_CODECCOMPONENTMANAGERSERVICE_H
-#define OHOS_HDI_CODEC_V1_0_CODECCOMPONENTMANAGERSERVICE_H
+#ifndef OHOS_HDI_CODEC_V2_0_CODECCOMPONENTMANAGERSERVICE_H
+#define OHOS_HDI_CODEC_V2_0_CODECCOMPONENTMANAGERSERVICE_H
 
 #include <map>
 #include <mutex>
 #include <hdf_remote_service.h>
 #include "device_resource_if.h"
-#include "v1_0/icodec_component.h"
-#include "v1_0/icodec_component_manager.h"
+#include "v2_0/icodec_component.h"
+#include "v2_0/icodec_component_manager.h"
 #include "component_mgr.h"
 namespace OHOS {
 namespace HDI {
 namespace Codec {
-namespace V1_0 {
+namespace V2_0 {
 class CodecComponentManagerService : public ICodecComponentManager {
 public:
     CodecComponentManagerService();
@@ -49,9 +49,9 @@ private:
     DeviceResourceNode resourceNode_;
     std::shared_ptr<OHOS::Codec::Omx::ComponentMgr> mgr_;
 };
-}  // namespace V1_0
+}  // namespace V2_0
 }  // namespace Codec
 }  // namespace HDI
 }  // namespace OHOS
 
-#endif  // OHOS_HDI_CODEC_V1_0_CODECCOMPONENTMANAGERSERVICE_H
\ No newline at end of file
+#endif  // OHOS_HDI_CODEC_V2_0_CODECCOMPONENTMANAGERSERVICE_H
\ No newline at end of file
diff --git a/codec/hal/idl_service/include/codec_component_service.h b/codec/hal/idl_service/include/codec_component_service.h
index eafcc5ada..802d220f5 100644
--- a/codec/hal/idl_service/include/codec_component_service.h
+++ b/codec/hal/idl_service/include/codec_component_service.h
@@ -13,15 +13,15 @@
  * limitations under the License.
  */
 
-#ifndef OHOS_HDI_CODEC_V1_0_CODECCOMPONENTSERVICE_H
-#define OHOS_HDI_CODEC_V1_0_CODECCOMPONENTSERVICE_H
+#ifndef OHOS_HDI_CODEC_V2_0_CODECCOMPONENTSERVICE_H
+#define OHOS_HDI_CODEC_V2_0_CODECCOMPONENTSERVICE_H
 
 #include "component_node.h"
-#include "v1_0/icodec_component.h"
+#include "v2_0/icodec_component.h"
 namespace OHOS {
 namespace HDI {
 namespace Codec {
-namespace V1_0 {
+namespace V2_0 {
 class CodecComponentService : public ICodecComponent {
 public:
     CodecComponentService(const std::shared_ptr<OHOS::Codec::Omx::ComponentNode> &node,
@@ -61,9 +61,9 @@ private:
     std::shared_ptr<OHOS::Codec::Omx::ComponentNode> node_;
     std::shared_ptr<OHOS::Codec::Omx::ComponentMgr> mgr_;
 };
-}  // namespace V1_0
+}  // namespace V2_0
 }  // namespace Codec
 }  // namespace HDI
 }  // namespace OHOS
 
-#endif  // OHOS_HDI_CODEC_V1_0_CODECCOMPONENTSERVICE_H
\ No newline at end of file
+#endif  // OHOS_HDI_CODEC_V2_0_CODECCOMPONENTSERVICE_H
\ No newline at end of file
diff --git a/codec/hal/idl_service/include/codec_death_recipient.h b/codec/hal/idl_service/include/codec_death_recipient.h
index a51875863..9eb7268fb 100644
--- a/codec/hal/idl_service/include/codec_death_recipient.h
+++ b/codec/hal/idl_service/include/codec_death_recipient.h
@@ -13,8 +13,8 @@
  * limitations under the License.
  */
 
-#ifndef OHOS_HDI_CODEC_V1_0_CODECDEATHRECIPIENT_H
-#define OHOS_HDI_CODEC_V1_0_CODECDEATHRECIPIENT_H
+#ifndef OHOS_HDI_CODEC_V2_0_CODECDEATHRECIPIENT_H
+#define OHOS_HDI_CODEC_V2_0_CODECDEATHRECIPIENT_H
 
 #include <functional>
 #include "iremote_object.h"
@@ -24,7 +24,7 @@
 namespace OHOS {
 namespace HDI {
 namespace Codec {
-namespace V1_0 {
+namespace V2_0 {
 
 void CleanResourceOfDiedService(sptr<IRemoteObject> remote, wptr<CodecComponentManagerService> service);
 void RegisterDeathRecipientService(const sptr<ICodecCallback> callback, uint32_t componentId,
@@ -47,9 +47,9 @@ private:
     wptr<CodecComponentManagerService> mgr;
 };
 
-}  // namespace V1_0
+}  // namespace V2_0
 }  // namespace Codec
 }  // namespace HDI
 }  // namespace OHOS
 
-#endif  // OHOS_HDI_CODEC_V1_0_CODECDEATHRECIPIENT_H
+#endif  // OHOS_HDI_CODEC_V2_0_CODECDEATHRECIPIENT_H
diff --git a/codec/hal/idl_service/include/codec_dfx_service.h b/codec/hal/idl_service/include/codec_dfx_service.h
index bba06008a..6e8dfdb67 100644
--- a/codec/hal/idl_service/include/codec_dfx_service.h
+++ b/codec/hal/idl_service/include/codec_dfx_service.h
@@ -26,7 +26,7 @@
 namespace OHOS {
 namespace HDI {
 namespace Codec {
-namespace V1_0 {
+namespace V2_0 {
 class CodecDfxService : public RefBase {
 public:
     ~CodecDfxService() = default;
@@ -48,7 +48,7 @@ private:
     static HdfSBuf *reply_;
 };
 
-}  // namespace V1_0
+}  // namespace V2_0
 }  // namespace Codec
 }  // namespace HDI
 }  // namespace OHOS
diff --git a/codec/hal/idl_service/include/component_node.h b/codec/hal/idl_service/include/component_node.h
index 0bdde1aa6..02a578981 100644
--- a/codec/hal/idl_service/include/component_node.h
+++ b/codec/hal/idl_service/include/component_node.h
@@ -24,13 +24,13 @@
 #include <osal_mem.h>
 #include <vector>
 #include "icodec_buffer.h"
-#include "v1_0/icodec_callback.h"
-#include "v1_0/icodec_component.h"
+#include "v2_0/icodec_callback.h"
+#include "v2_0/icodec_component.h"
 #include "component_mgr.h"
-using OHOS::HDI::Codec::V1_0::CompVerInfo;
-using OHOS::HDI::Codec::V1_0::ICodecCallback;
-using OHOS::HDI::Codec::V1_0::OmxCodecBuffer;
-using OHOS::HDI::Codec::V1_0::CodecStateType;
+using OHOS::HDI::Codec::V2_0::CompVerInfo;
+using OHOS::HDI::Codec::V2_0::ICodecCallback;
+using OHOS::HDI::Codec::V2_0::OmxCodecBuffer;
+using OHOS::HDI::Codec::V2_0::CodecStateType;
 namespace OHOS {
 namespace Codec {
 namespace Omx {
@@ -41,15 +41,15 @@ public:
     int32_t OpenHandle(const std::string& name);
     int32_t CloseHandle();
     int32_t GetComponentVersion(CompVerInfo &verInfo);
-    int32_t SendCommand(HDI::Codec::V1_0::CodecCommandType cmd, uint32_t param, int8_t *cmdData);
+    int32_t SendCommand(HDI::Codec::V2_0::CodecCommandType cmd, uint32_t param, int8_t *cmdData);
     int32_t GetParameter(OMX_INDEXTYPE paramIndex, int8_t *param);
     int32_t SetParameter(OMX_INDEXTYPE paramIndex, const int8_t *param);
     int32_t GetConfig(OMX_INDEXTYPE index, int8_t *config);
     int32_t SetConfig(OMX_INDEXTYPE index, const int8_t *config);
     int32_t GetExtensionIndex(const char *parameterName, uint32_t& index);
-    int32_t GetState(HDI::Codec::V1_0::CodecStateType &state);
+    int32_t GetState(HDI::Codec::V2_0::CodecStateType &state);
     int32_t ComponentTunnelRequest(uint32_t port, int32_t omxHandleTypeTunneledComp, uint32_t tunneledPort,
-                                   OHOS::HDI::Codec::V1_0::CodecTunnelSetupType &tunnelSetup);
+                                   OHOS::HDI::Codec::V2_0::CodecTunnelSetupType &tunnelSetup);
     int32_t UseBuffer(uint32_t portIndex, OmxCodecBuffer &buffer);
     int32_t AllocateBuffer(uint32_t portIndex, OmxCodecBuffer &buffer);
     int32_t FreeBuffer(uint32_t portIndex, const OmxCodecBuffer &buffer);
@@ -70,7 +70,7 @@ public:
     static OMX_CALLBACKTYPE callbacks_;  // callbacks
 
 private:
-    int32_t OnEvent(HDI::Codec::V1_0::CodecEventType event, uint32_t data1, uint32_t data2, void *eventData);
+    int32_t OnEvent(HDI::Codec::V2_0::CodecEventType event, uint32_t data1, uint32_t data2, void *eventData);
     int32_t OnEmptyBufferDone(OMX_BUFFERHEADERTYPE *buffer);
     int32_t OnFillBufferDone(OMX_BUFFERHEADERTYPE *buffer);
     uint32_t GenerateBufferId();
diff --git a/codec/hal/idl_service/include/icodec_buffer.h b/codec/hal/idl_service/include/icodec_buffer.h
index 34c3f0957..16ce9a013 100644
--- a/codec/hal/idl_service/include/icodec_buffer.h
+++ b/codec/hal/idl_service/include/icodec_buffer.h
@@ -23,8 +23,8 @@
 #include <memory>
 #include <refbase.h>
 #include "codec_omx_ext.h"
-#include "v1_0/codec_types.h"
-using OHOS::HDI::Codec::V1_0::OmxCodecBuffer;
+#include "v2_0/codec_types.h"
+using OHOS::HDI::Codec::V2_0::OmxCodecBuffer;
 constexpr uint32_t TIME_WAIT_MS = 10;
 namespace OHOS {
 namespace Codec {
diff --git a/codec/hal/idl_service/src/codec_component_config.cpp b/codec/hal/idl_service/src/codec_component_config.cpp
index 193f0b0e4..28054c79b 100644
--- a/codec/hal/idl_service/src/codec_component_config.cpp
+++ b/codec/hal/idl_service/src/codec_component_config.cpp
@@ -67,7 +67,7 @@ namespace {
     constexpr char CODEC_CONFIG_KEY_CHANNEL_COUNT[] = "channelCount";
 }
 
-using namespace OHOS::HDI::Codec::V1_0;
+using namespace OHOS::HDI::Codec::V2_0;
 namespace OHOS {
 namespace Codec {
 namespace Omx {
diff --git a/codec/hal/idl_service/src/codec_component_manager_driver.cpp b/codec/hal/idl_service/src/codec_component_manager_driver.cpp
index b8cd08772..186c8cad0 100644
--- a/codec/hal/idl_service/src/codec_component_manager_driver.cpp
+++ b/codec/hal/idl_service/src/codec_component_manager_driver.cpp
@@ -18,10 +18,10 @@
 #include <hdf_sbuf_ipc.h>
 #include "codec_component_config.h"
 #include "codec_log_wrapper.h"
-#include "v1_0/codec_component_manager_stub.h"
+#include "v2_0/codec_component_manager_stub.h"
 #include "codec_dfx_service.h"
 #include <devhost_dump_reg.h>
-using namespace OHOS::HDI::Codec::V1_0;
+using namespace OHOS::HDI::Codec::V2_0;
 namespace {
     struct HdfCodecComponentManagerHost {
         struct IDeviceIoService ioService;
diff --git a/codec/hal/idl_service/src/codec_component_manager_service.cpp b/codec/hal/idl_service/src/codec_component_manager_service.cpp
index 508ae39cd..29d7fee43 100644
--- a/codec/hal/idl_service/src/codec_component_manager_service.cpp
+++ b/codec/hal/idl_service/src/codec_component_manager_service.cpp
@@ -25,7 +25,7 @@
 namespace OHOS {
 namespace HDI {
 namespace Codec {
-namespace V1_0 {
+namespace V2_0 {
 sptr<CodecComponentManagerService> g_codecManagerService = nullptr;
 std::once_flag m_serviceFlag;
 using OHOS::Codec::Omx::ComponentNode;
@@ -126,7 +126,7 @@ void CodecComponentManagerService::GetManagerMap(std::map<uint32_t, sptr<ICodecC
 {
     dumpMap = componentMap_;
 }
-}  // namespace V1_0
+}  // namespace V2_0
 }  // namespace Codec
 }  // namespace HDI
 }  // namespace OHOS
diff --git a/codec/hal/idl_service/src/codec_component_service.cpp b/codec/hal/idl_service/src/codec_component_service.cpp
index 3ec30c5fa..43e55f50c 100644
--- a/codec/hal/idl_service/src/codec_component_service.cpp
+++ b/codec/hal/idl_service/src/codec_component_service.cpp
@@ -23,7 +23,7 @@
 namespace OHOS {
 namespace HDI {
 namespace Codec {
-namespace V1_0 {
+namespace V2_0 {
 CodecComponentService::CodecComponentService(const std::shared_ptr<OHOS::Codec::Omx::ComponentNode> &node,
     const std::shared_ptr<OHOS::Codec::Omx::ComponentMgr> mgr, const std::string name)
 {
@@ -255,7 +255,7 @@ void CodecComponentService::GetComponentNode(std::shared_ptr<OHOS::Codec::Omx::C
     dumpNode_ = node_;
 }
 
-}  // namespace V1_0
+}  // namespace V2_0
 }  // namespace Codec
 }  // namespace HDI
 }  // namespace OHOS
diff --git a/codec/hal/idl_service/src/codec_death_recipient.cpp b/codec/hal/idl_service/src/codec_death_recipient.cpp
index 193d95b67..68aa7c12c 100644
--- a/codec/hal/idl_service/src/codec_death_recipient.cpp
+++ b/codec/hal/idl_service/src/codec_death_recipient.cpp
@@ -22,7 +22,7 @@
 namespace OHOS {
 namespace HDI {
 namespace Codec {
-namespace V1_0 {
+namespace V2_0 {
 
 static std::map<IRemoteObject *, std::set<uint32_t>> g_remoteCompsMap;
 static std::map<IRemoteObject *, sptr<CodecDeathRecipient>> g_deathReciMap;
@@ -104,7 +104,7 @@ void RemoveMapperOfDestoryedComponent(uint32_t componentId)
     }
     CODEC_LOGI("Remove mapper destoryedComponent success!");
 }
-}  // namespace V1_0
+}  // namespace V2_0
 }  // namespace Codec
 }  // namespace HDI
 }  // namespace OHOS
diff --git a/codec/hal/idl_service/src/codec_dfx_service.cpp b/codec/hal/idl_service/src/codec_dfx_service.cpp
index db070dddb..45a5cb94f 100644
--- a/codec/hal/idl_service/src/codec_dfx_service.cpp
+++ b/codec/hal/idl_service/src/codec_dfx_service.cpp
@@ -19,7 +19,7 @@
 namespace OHOS {
 namespace HDI {
 namespace Codec {
-namespace V1_0 {
+namespace V2_0 {
 #define ARGV_FLAG 1
 #define INPUT_PORT_INDEX 0
 #define OUTPUT_PORT_INDEX 1
@@ -158,7 +158,7 @@ int32_t CodecDfxService::DevCodecHostDump(struct HdfSBuf *data, struct HdfSBuf *
     }
     return HDF_SUCCESS;
 }
-}  // namespace V1_0
+}  // namespace V2_0
 }  // namespace Codec
 }  // namespace HDI
 }  // namespace OHOS
diff --git a/codec/hal/idl_service/src/codec_dma_buffer.cpp b/codec/hal/idl_service/src/codec_dma_buffer.cpp
index acb1d3634..034756a53 100644
--- a/codec/hal/idl_service/src/codec_dma_buffer.cpp
+++ b/codec/hal/idl_service/src/codec_dma_buffer.cpp
@@ -18,8 +18,8 @@
 #include <securec.h>
 #include <unistd.h>
 #include "codec_log_wrapper.h"
-#include "v1_0/codec_types.h"
-using namespace OHOS::HDI::Codec::V1_0;
+#include "v2_0/codec_types.h"
+using namespace OHOS::HDI::Codec::V2_0;
 namespace OHOS {
 namespace Codec {
 namespace Omx {
diff --git a/codec/hal/idl_service/src/codec_dyna_buffer.cpp b/codec/hal/idl_service/src/codec_dyna_buffer.cpp
index 6c50cacaa..eaa079de3 100644
--- a/codec/hal/idl_service/src/codec_dyna_buffer.cpp
+++ b/codec/hal/idl_service/src/codec_dyna_buffer.cpp
@@ -18,8 +18,8 @@
 #include <securec.h>
 #include <unistd.h>
 #include "codec_log_wrapper.h"
-#include "v1_0/codec_types.h"
-using namespace OHOS::HDI::Codec::V1_0;
+#include "v2_0/codec_types.h"
+using namespace OHOS::HDI::Codec::V2_0;
 namespace OHOS {
 namespace Codec {
 namespace Omx {
diff --git a/codec/hal/idl_service/src/codec_handle_buffer.cpp b/codec/hal/idl_service/src/codec_handle_buffer.cpp
index 245d62ac2..92538de5f 100644
--- a/codec/hal/idl_service/src/codec_handle_buffer.cpp
+++ b/codec/hal/idl_service/src/codec_handle_buffer.cpp
@@ -18,8 +18,8 @@
 #include <securec.h>
 #include <unistd.h>
 #include "codec_log_wrapper.h"
-#include "v1_0/codec_types.h"
-using namespace OHOS::HDI::Codec::V1_0;
+#include "v2_0/codec_types.h"
+using namespace OHOS::HDI::Codec::V2_0;
 namespace OHOS {
 namespace Codec {
 namespace Omx {
diff --git a/codec/hal/idl_service/src/codec_share_buffer.cpp b/codec/hal/idl_service/src/codec_share_buffer.cpp
index 72bc95896..d785bb6fe 100644
--- a/codec/hal/idl_service/src/codec_share_buffer.cpp
+++ b/codec/hal/idl_service/src/codec_share_buffer.cpp
@@ -18,7 +18,7 @@
 #include <securec.h>
 #include <unistd.h>
 #include "codec_log_wrapper.h"
-using namespace OHOS::HDI::Codec::V1_0;
+using namespace OHOS::HDI::Codec::V2_0;
 namespace OHOS {
 namespace Codec {
 namespace Omx {
diff --git a/codec/hal/idl_service/src/component_node.cpp b/codec/hal/idl_service/src/component_node.cpp
index 53312bb12..41354d7f1 100644
--- a/codec/hal/idl_service/src/component_node.cpp
+++ b/codec/hal/idl_service/src/component_node.cpp
@@ -22,16 +22,16 @@
 #include "component_mgr.h"
 #include "icodec_buffer.h"
 
-using OHOS::HDI::Codec::V1_0::EventInfo;
-using OHOS::HDI::Codec::V1_0::CodecEventType;
-using OHOS::HDI::Codec::V1_0::CodecStateType;
-using OHOS::HDI::Codec::V1_0::CodecCommandType;
-using OHOS::HDI::Codec::V1_0::CodecStateType;
-using OHOS::HDI::Codec::V1_0::CODEC_STATE_INVALID;
-using OHOS::HDI::Codec::V1_0::CODEC_STATE_LOADED;
-using OHOS::HDI::Codec::V1_0::CODEC_STATE_IDLE;
-using OHOS::HDI::Codec::V1_0::CODEC_STATE_EXECUTING;
-using OHOS::HDI::Codec::V1_0::CODEC_COMMAND_STATE_SET;
+using OHOS::HDI::Codec::V2_0::EventInfo;
+using OHOS::HDI::Codec::V2_0::CodecEventType;
+using OHOS::HDI::Codec::V2_0::CodecStateType;
+using OHOS::HDI::Codec::V2_0::CodecCommandType;
+using OHOS::HDI::Codec::V2_0::CodecStateType;
+using OHOS::HDI::Codec::V2_0::CODEC_STATE_INVALID;
+using OHOS::HDI::Codec::V2_0::CODEC_STATE_LOADED;
+using OHOS::HDI::Codec::V2_0::CODEC_STATE_IDLE;
+using OHOS::HDI::Codec::V2_0::CODEC_STATE_EXECUTING;
+using OHOS::HDI::Codec::V2_0::CODEC_COMMAND_STATE_SET;
 #define FD_SIZE sizeof(int)
 namespace {
     constexpr int NAME_LENGTH = 32;
@@ -237,7 +237,7 @@ int32_t ComponentNode::GetState(CodecStateType &state)
 }
 
 int32_t ComponentNode::ComponentTunnelRequest(uint32_t port, int32_t omxHandleTypeTunneledComp, uint32_t tunneledPort,
-                                              OHOS::HDI::Codec::V1_0::CodecTunnelSetupType &tunnelSetup)
+                                              OHOS::HDI::Codec::V2_0::CodecTunnelSetupType &tunnelSetup)
 {
     CHECK_AND_RETURN_RET_LOG(comp_ != nullptr, OMX_ErrorInvalidComponent, "comp_ is null");
     OMX_COMPONENTTYPE *comType = static_cast<OMX_COMPONENTTYPE *>(comp_);
diff --git a/codec/hal/idl_service/src/icodec_buffer.cpp b/codec/hal/idl_service/src/icodec_buffer.cpp
index 6b7ea0d2e..d290f9de6 100644
--- a/codec/hal/idl_service/src/icodec_buffer.cpp
+++ b/codec/hal/idl_service/src/icodec_buffer.cpp
@@ -21,8 +21,8 @@
 #include "codec_dma_buffer.h"
 #include "codec_log_wrapper.h"
 #include "codec_share_buffer.h"
-#include "v1_0/codec_types.h"
-using namespace OHOS::HDI::Codec::V1_0;
+#include "v2_0/codec_types.h"
+using namespace OHOS::HDI::Codec::V2_0;
 namespace OHOS {
 namespace Codec {
 namespace Omx {
diff --git a/codec/test/benchmarktest/BUILD.gn b/codec/test/benchmarktest/BUILD.gn
index 6ebbda7a3..8996ecbcc 100644
--- a/codec/test/benchmarktest/BUILD.gn
+++ b/codec/test/benchmarktest/BUILD.gn
@@ -37,7 +37,7 @@ ohos_benchmarktest("hdf_codec_benchmark_test") {
     external_deps = [
       "c_utils:utils",
       "drivers_interface_codec:codec_idl_headers",
-      "drivers_interface_codec:libcodec_proxy_1.0",
+      "drivers_interface_codec:libcodec_proxy_2.0",
       "drivers_interface_display:display_buffer_idl_headers",
       "drivers_interface_display:display_composer_idl_headers",
       "drivers_interface_display:libdisplay_buffer_hdi_impl",
diff --git a/codec/test/benchmarktest/codec_benchmark_manager_test.cpp b/codec/test/benchmarktest/codec_benchmark_manager_test.cpp
index c2aaea81d..85229ddcf 100644
--- a/codec/test/benchmarktest/codec_benchmark_manager_test.cpp
+++ b/codec/test/benchmarktest/codec_benchmark_manager_test.cpp
@@ -14,13 +14,13 @@
  */
 #include <gtest/gtest.h>
 #include <benchmark/benchmark.h>
-#include "v1_0/codec_callback_service.h"
-#include "v1_0/icodec_callback.h"
-#include "v1_0/icodec_component_manager.h"
+#include "v2_0/codec_callback_service.h"
+#include "v2_0/icodec_callback.h"
+#include "v2_0/icodec_component_manager.h"
 using namespace std;
 using namespace testing::ext;
 using OHOS::sptr;
-using namespace OHOS::HDI::Codec::V1_0;
+using namespace OHOS::HDI::Codec::V2_0;
 constexpr int64_t APP_DATA = 3;
 namespace {
 const int32_t ITERATION_FREQUENCY = 100;
diff --git a/codec/test/benchmarktest/codec_benchmark_omx_test.cpp b/codec/test/benchmarktest/codec_benchmark_omx_test.cpp
index b4b9a8461..acc6a8452 100644
--- a/codec/test/benchmarktest/codec_benchmark_omx_test.cpp
+++ b/codec/test/benchmarktest/codec_benchmark_omx_test.cpp
@@ -24,9 +24,9 @@
 #include <vector>
 #include <benchmark/benchmark.h>
 #include "codec_omx_ext.h"
-#include "v1_0/codec_callback_service.h"
-#include "v1_0/icodec_component.h"
-#include "v1_0/icodec_component_manager.h"
+#include "v2_0/codec_callback_service.h"
+#include "v2_0/icodec_component.h"
+#include "v2_0/icodec_component_manager.h"
 #include "v1_0/display_composer_type.h"
 #include "v1_0/display_buffer_type.h"
 #include "v1_0/include/idisplay_buffer.h"
@@ -40,7 +40,7 @@ using namespace std;
 using namespace testing::ext;
 using OHOS::sptr;
 using OHOS::HDI::Base::NativeBuffer;
-using namespace OHOS::HDI::Codec::V1_0;
+using namespace OHOS::HDI::Codec::V2_0;
 using namespace OHOS::HDI::Display::Buffer::V1_0;
 using namespace OHOS::HDI::Display::Composer::V1_0;
 namespace {
@@ -57,7 +57,7 @@ static IDisplayBuffer *gralloc_ = nullptr;
 static sptr<ICodecComponent> component_ = nullptr;
 static sptr<ICodecCallback> callback_ = nullptr;
 static sptr<ICodecComponentManager> manager_ = nullptr;
-static OHOS::HDI::Codec::V1_0::CodecVersionType version_;
+static OHOS::HDI::Codec::V2_0::CodecVersionType version_;
 static inline std::string compName_ = "";
 
 class CodecBenchmarkOmxTest : public benchmark::Fixture {
@@ -393,8 +393,8 @@ BENCHMARK_F(CodecBenchmarkOmxTest, ComponentTunnelRequest)(benchmark::State &sta
     int32_t ret;
     const int32_t tunneledComp = TUNNELE_COMP;
     const uint32_t tunneledPort = TUNNELED_PORT;
-    OHOS::HDI::Codec::V1_0::CodecTunnelSetupType tunnelSetup;
-    tunnelSetup.supplier = OHOS::HDI::Codec::V1_0::CODEC_BUFFER_SUPPLY_INPUT;
+    OHOS::HDI::Codec::V2_0::CodecTunnelSetupType tunnelSetup;
+    tunnelSetup.supplier = OHOS::HDI::Codec::V2_0::CODEC_BUFFER_SUPPLY_INPUT;
     for (auto _ : state) {
     ret = component_->ComponentTunnelRequest(outputIndex, tunneledComp, tunneledPort,
         tunnelSetup, tunnelSetup);
diff --git a/codec/test/benchmarktest/codec_callback_service.cpp b/codec/test/benchmarktest/codec_callback_service.cpp
index ba453a6b4..f868af566 100644
--- a/codec/test/benchmarktest/codec_callback_service.cpp
+++ b/codec/test/benchmarktest/codec_callback_service.cpp
@@ -13,13 +13,13 @@
  * limitations under the License.
  */
 
-#include "v1_0/codec_callback_service.h"
+#include "v2_0/codec_callback_service.h"
 #include <hdf_base.h>
 
 namespace OHOS {
 namespace HDI {
 namespace Codec {
-namespace V1_0 {
+namespace V2_0 {
 int32_t CodecCallbackService::EventHandler(CodecEventType event, const EventInfo &info)
 {
     (void)event;
@@ -40,7 +40,7 @@ int32_t CodecCallbackService::FillBufferDone(int64_t appData, const OmxCodecBuff
     (void)buffer;
     return HDF_SUCCESS;
 }
-} // V1_0
+} // V2_0
 } // Codec
 } // HDI
 } // OHOS
diff --git a/codec/test/benchmarktest/codec_callback_service.h b/codec/test/benchmarktest/codec_callback_service.h
index 268548705..ae7f75455 100644
--- a/codec/test/benchmarktest/codec_callback_service.h
+++ b/codec/test/benchmarktest/codec_callback_service.h
@@ -13,15 +13,15 @@
  * limitations under the License.
  */
 
-#ifndef OHOS_HDI_CODEC_V1_0_CODECCALLBACKSERVICE_H
-#define OHOS_HDI_CODEC_V1_0_CODECCALLBACKSERVICE_H
+#ifndef OHOS_HDI_CODEC_V2_0_CODECCALLBACKSERVICE_H
+#define OHOS_HDI_CODEC_V2_0_CODECCALLBACKSERVICE_H
 
-#include "v1_0/icodec_callback.h"
+#include "v2_0/icodec_callback.h"
 
 namespace OHOS {
 namespace HDI {
 namespace Codec {
-namespace V1_0 {
+namespace V2_0 {
 class CodecCallbackService : public ICodecCallback {
 public:
     CodecCallbackService() = default;
@@ -30,9 +30,9 @@ public:
     int32_t EmptyBufferDone(int64_t appData, const OmxCodecBuffer &buffer) override;
     int32_t FillBufferDone(int64_t appData, const OmxCodecBuffer &buffer) override;
 };
-} // V1_0
+} // V2_0
 } // Codec
 } // HDI
 } // OHOS
 
-#endif // OHOS_HDI_CODEC_V1_0_CODECCALLBACKSERVICE_H
+#endif // OHOS_HDI_CODEC_V2_0_CODECCALLBACKSERVICE_H
diff --git a/codec/test/demo/idl/BUILD.gn b/codec/test/demo/idl/BUILD.gn
index cadec55f9..a1519652d 100644
--- a/codec/test/demo/idl/BUILD.gn
+++ b/codec/test/demo/idl/BUILD.gn
@@ -30,7 +30,7 @@ ohos_executable("codec_idl_omx_decode") {
     external_deps = [
       "c_utils:utils",
       "drivers_interface_codec:codec_idl_headers",
-      "drivers_interface_codec:libcodec_proxy_1.0",
+      "drivers_interface_codec:libcodec_proxy_2.0",
       "drivers_interface_display:display_buffer_idl_headers",
       "drivers_interface_display:display_composer_idl_headers",
       "drivers_interface_display:libdisplay_buffer_hdi_impl",
@@ -69,7 +69,7 @@ ohos_executable("codec_idl_omx_encode") {
     external_deps = [
       "c_utils:utils",
       "drivers_interface_codec:codec_idl_headers",
-      "drivers_interface_codec:libcodec_proxy_1.0",
+      "drivers_interface_codec:libcodec_proxy_2.0",
       "drivers_interface_display:display_buffer_idl_headers",
       "drivers_interface_display:display_composer_idl_headers",
       "drivers_interface_display:libdisplay_buffer_hdi_impl",
diff --git a/codec/test/demo/idl/include/codec_hdi_callback.h b/codec/test/demo/idl/include/codec_hdi_callback.h
index ff1944421..d6ee31529 100644
--- a/codec/test/demo/idl/include/codec_hdi_callback.h
+++ b/codec/test/demo/idl/include/codec_hdi_callback.h
@@ -16,18 +16,18 @@
 #ifndef CODEC_HDI_CALLBACK_H
 #define CODEC_HDI_CALLBACK_H
 #include "icodec_hdi_callback_base.h"
-#include "v1_0/icodec_callback.h"
-class CodecHdiCallback : public OHOS::HDI::Codec::V1_0::ICodecCallback {
+#include "v2_0/icodec_callback.h"
+class CodecHdiCallback : public OHOS::HDI::Codec::V2_0::ICodecCallback {
 public:
     CodecHdiCallback(std::shared_ptr<ICodecHdiCallBackBase> codecHdi);
     virtual ~CodecHdiCallback() = default;
 
-    int32_t EventHandler(OHOS::HDI::Codec::V1_0::CodecEventType event,
-        const OHOS::HDI::Codec::V1_0::EventInfo &info) override;
+    int32_t EventHandler(OHOS::HDI::Codec::V2_0::CodecEventType event,
+        const OHOS::HDI::Codec::V2_0::EventInfo &info) override;
 
-    int32_t EmptyBufferDone(int64_t appData, const OHOS::HDI::Codec::V1_0::OmxCodecBuffer &buffer) override;
+    int32_t EmptyBufferDone(int64_t appData, const OHOS::HDI::Codec::V2_0::OmxCodecBuffer &buffer) override;
 
-    int32_t FillBufferDone(int64_t appData, const OHOS::HDI::Codec::V1_0::OmxCodecBuffer &buffer) override;
+    int32_t FillBufferDone(int64_t appData, const OHOS::HDI::Codec::V2_0::OmxCodecBuffer &buffer) override;
 
 private:
     std::shared_ptr<ICodecHdiCallBackBase> codecHdi_;
diff --git a/codec/test/demo/idl/include/codec_hdi_decode.h b/codec/test/demo/idl/include/codec_hdi_decode.h
index 98d400ae9..def8d2355 100644
--- a/codec/test/demo/idl/include/codec_hdi_decode.h
+++ b/codec/test/demo/idl/include/codec_hdi_decode.h
@@ -33,18 +33,18 @@
 #include "command_parse.h"
 #include "hdf_log.h"
 #include "sys/mman.h"
-#include "v1_0/codec_types.h"
-#include "v1_0/icodec_callback.h"
-#include "v1_0/icodec_component.h"
-#include "v1_0/icodec_component_manager.h"
+#include "v2_0/codec_types.h"
+#include "v2_0/icodec_callback.h"
+#include "v2_0/icodec_component.h"
+#include "v2_0/icodec_component_manager.h"
 #include "v1_0/include/idisplay_buffer.h"
 
-using OHOS::HDI::Codec::V1_0::OmxCodecBuffer;
+using OHOS::HDI::Codec::V2_0::OmxCodecBuffer;
 class CodecHdiDecode : public ICodecHdiCallBackBase,
                        public std::enable_shared_from_this<CodecHdiDecode> {
     enum class PortIndex { PORT_INDEX_INPUT = 0, PORT_INDEX_OUTPUT = 1 };
     struct BufferInfo {
-        std::shared_ptr<OHOS::HDI::Codec::V1_0::OmxCodecBuffer> omxBuffer;
+        std::shared_ptr<OHOS::HDI::Codec::V2_0::OmxCodecBuffer> omxBuffer;
         std::shared_ptr<OHOS::Ashmem> avSharedPtr;
         PortIndex portIndex;
         BufferHandle *bufferHandle;
@@ -88,10 +88,10 @@ public:
     void FreeBuffers();
     void Run();
     void Release();
-    int32_t OnEmptyBufferDone(const struct OHOS::HDI::Codec::V1_0::OmxCodecBuffer &buffer) override;
-    int32_t OnFillBufferDone(const struct OHOS::HDI::Codec::V1_0::OmxCodecBuffer &buffer) override;
-    int32_t EventHandler(OHOS::HDI::Codec::V1_0::CodecEventType event,
-        const OHOS::HDI::Codec::V1_0::EventInfo &info) override;
+    int32_t OnEmptyBufferDone(const struct OHOS::HDI::Codec::V2_0::OmxCodecBuffer &buffer) override;
+    int32_t OnFillBufferDone(const struct OHOS::HDI::Codec::V2_0::OmxCodecBuffer &buffer) override;
+    int32_t EventHandler(OHOS::HDI::Codec::V2_0::CodecEventType event,
+        const OHOS::HDI::Codec::V2_0::EventInfo &info) override;
     void WaitForStatusChanged();
     void OnStatusChanged();
     bool ReadOnePacket(FILE *fp, char *buf, uint32_t &filledCount);
@@ -124,9 +124,9 @@ private:
     uint32_t width_;
     uint32_t height_;
     uint32_t stride_;
-    OHOS::sptr<OHOS::HDI::Codec::V1_0::ICodecComponent> client_;
-    OHOS::sptr<OHOS::HDI::Codec::V1_0::ICodecCallback> callback_;
-    OHOS::sptr<OHOS::HDI::Codec::V1_0::ICodecComponentManager> omxMgr_;
+    OHOS::sptr<OHOS::HDI::Codec::V2_0::ICodecComponent> client_;
+    OHOS::sptr<OHOS::HDI::Codec::V2_0::ICodecCallback> callback_;
+    OHOS::sptr<OHOS::HDI::Codec::V2_0::ICodecComponentManager> omxMgr_;
     uint32_t componentId_;
     std::map<int, std::shared_ptr<BufferInfo>> omxBuffers_;  // key is buferid
     std::map<int, void *> addrs_;
diff --git a/codec/test/demo/idl/include/codec_hdi_encode.h b/codec/test/demo/idl/include/codec_hdi_encode.h
index 205b87895..0dac97943 100644
--- a/codec/test/demo/idl/include/codec_hdi_encode.h
+++ b/codec/test/demo/idl/include/codec_hdi_encode.h
@@ -33,13 +33,13 @@
 #include "command_parse.h"
 #include "hdf_log.h"
 #include "sys/mman.h"
-#include "v1_0/codec_types.h"
-#include "v1_0/icodec_callback.h"
-#include "v1_0/icodec_component.h"
-#include "v1_0/icodec_component_manager.h"
+#include "v2_0/codec_types.h"
+#include "v2_0/icodec_callback.h"
+#include "v2_0/icodec_component.h"
+#include "v2_0/icodec_component_manager.h"
 #include "v1_0/include/idisplay_buffer.h"
 
-using OHOS::HDI::Codec::V1_0::OmxCodecBuffer;
+using OHOS::HDI::Codec::V2_0::OmxCodecBuffer;
 class CodecHdiEncode : public ICodecHdiCallBackBase,
                        public std::enable_shared_from_this<CodecHdiEncode> {
     enum class PortIndex { PORT_INDEX_INPUT = 0, PORT_INDEX_OUTPUT = 1 };
@@ -85,8 +85,8 @@ public:
     bool ReadOneFrame(FILE *fp, char *buf, uint32_t &filledCount);
     int32_t OnEmptyBufferDone(const struct OmxCodecBuffer &buffer) override;
     int32_t OnFillBufferDone(const struct OmxCodecBuffer &buffer) override;
-    int32_t EventHandler(OHOS::HDI::Codec::V1_0::CodecEventType event,
-        const OHOS::HDI::Codec::V1_0::EventInfo &info) override;
+    int32_t EventHandler(OHOS::HDI::Codec::V2_0::CodecEventType event,
+        const OHOS::HDI::Codec::V2_0::EventInfo &info) override;
 
 private:
     int32_t ConfigBitMode();
@@ -113,9 +113,9 @@ private:
     uint32_t width_;
     uint32_t height_;
     uint32_t stride_;
-    OHOS::sptr<OHOS::HDI::Codec::V1_0::ICodecComponent> client_;
-    OHOS::sptr<OHOS::HDI::Codec::V1_0::ICodecCallback> callback_;
-    OHOS::sptr<OHOS::HDI::Codec::V1_0::ICodecComponentManager> omxMgr_;
+    OHOS::sptr<OHOS::HDI::Codec::V2_0::ICodecComponent> client_;
+    OHOS::sptr<OHOS::HDI::Codec::V2_0::ICodecCallback> callback_;
+    OHOS::sptr<OHOS::HDI::Codec::V2_0::ICodecComponentManager> omxMgr_;
     uint32_t componentId_;
     std::map<int, std::shared_ptr<BufferInfo>> omxBuffers_;  // key is bufferID
     std::map<int, const void *> addrs_;
diff --git a/codec/test/demo/idl/include/icodec_hdi_callback_base.h b/codec/test/demo/idl/include/icodec_hdi_callback_base.h
index 297a19305..8a9f7a198 100644
--- a/codec/test/demo/idl/include/icodec_hdi_callback_base.h
+++ b/codec/test/demo/idl/include/icodec_hdi_callback_base.h
@@ -15,12 +15,12 @@
 
 #ifndef CODEC_HDI_BASE_H
 #define CODEC_HDI_BASE_H
-#include "v1_0/codec_types.h"
+#include "v2_0/codec_types.h"
 class ICodecHdiCallBackBase {
 public:
-    virtual int32_t EventHandler(OHOS::HDI::Codec::V1_0::CodecEventType event,
-        const OHOS::HDI::Codec::V1_0::EventInfo &info) = 0;
-    virtual int32_t OnEmptyBufferDone(const OHOS::HDI::Codec::V1_0::OmxCodecBuffer &buffer) = 0;
-    virtual int32_t OnFillBufferDone(const OHOS::HDI::Codec::V1_0::OmxCodecBuffer &buffer) = 0;
+    virtual int32_t EventHandler(OHOS::HDI::Codec::V2_0::CodecEventType event,
+        const OHOS::HDI::Codec::V2_0::EventInfo &info) = 0;
+    virtual int32_t OnEmptyBufferDone(const OHOS::HDI::Codec::V2_0::OmxCodecBuffer &buffer) = 0;
+    virtual int32_t OnFillBufferDone(const OHOS::HDI::Codec::V2_0::OmxCodecBuffer &buffer) = 0;
 };
 #endif  // CODEC_HDI_BASE_H
\ No newline at end of file
diff --git a/codec/test/demo/idl/src/codec_hdi_callback.cpp b/codec/test/demo/idl/src/codec_hdi_callback.cpp
index 91757ddf8..33a8ea9f8 100644
--- a/codec/test/demo/idl/src/codec_hdi_callback.cpp
+++ b/codec/test/demo/idl/src/codec_hdi_callback.cpp
@@ -20,8 +20,8 @@ CodecHdiCallback::CodecHdiCallback(std::shared_ptr<ICodecHdiCallBackBase> codecH
     codecHdi_ = codecHdi;
 }
 
-int32_t CodecHdiCallback::EventHandler(OHOS::HDI::Codec::V1_0::CodecEventType event,
-    const OHOS::HDI::Codec::V1_0::EventInfo &info)
+int32_t CodecHdiCallback::EventHandler(OHOS::HDI::Codec::V2_0::CodecEventType event,
+    const OHOS::HDI::Codec::V2_0::EventInfo &info)
 {
     if (codecHdi_) {
         codecHdi_->EventHandler(event, info);
@@ -29,7 +29,7 @@ int32_t CodecHdiCallback::EventHandler(OHOS::HDI::Codec::V1_0::CodecEventType ev
     return HDF_SUCCESS;
 }
 
-int32_t CodecHdiCallback::EmptyBufferDone(int64_t appData, const OHOS::HDI::Codec::V1_0::OmxCodecBuffer &buffer)
+int32_t CodecHdiCallback::EmptyBufferDone(int64_t appData, const OHOS::HDI::Codec::V2_0::OmxCodecBuffer &buffer)
 {
     if (codecHdi_) {
         codecHdi_->OnEmptyBufferDone(buffer);
@@ -37,7 +37,7 @@ int32_t CodecHdiCallback::EmptyBufferDone(int64_t appData, const OHOS::HDI::Code
     return HDF_SUCCESS;
 }
 
-int32_t CodecHdiCallback::FillBufferDone(int64_t appData, const OHOS::HDI::Codec::V1_0::OmxCodecBuffer &buffer)
+int32_t CodecHdiCallback::FillBufferDone(int64_t appData, const OHOS::HDI::Codec::V2_0::OmxCodecBuffer &buffer)
 {
     if (codecHdi_) {
         codecHdi_->OnFillBufferDone(buffer);
diff --git a/codec/test/demo/idl/src/codec_hdi_decode.cpp b/codec/test/demo/idl/src/codec_hdi_decode.cpp
index 6f9f076a0..eafca0631 100644
--- a/codec/test/demo/idl/src/codec_hdi_decode.cpp
+++ b/codec/test/demo/idl/src/codec_hdi_decode.cpp
@@ -25,7 +25,7 @@ using namespace std;
 using namespace OHOS;
 using OHOS::sptr;
 using OHOS::HDI::Base::NativeBuffer;
-using namespace OHOS::HDI::Codec::V1_0;
+using namespace OHOS::HDI::Codec::V2_0;
 using namespace OHOS::HDI::Display::Buffer::V1_0;
 using namespace OHOS::HDI::Display::Composer::V1_0;
 #define HDF_LOG_TAG     codec_omx_hdi_dec
diff --git a/codec/test/demo/idl/src/codec_hdi_encode.cpp b/codec/test/demo/idl/src/codec_hdi_encode.cpp
index 25e65cc29..4086af77f 100644
--- a/codec/test/demo/idl/src/codec_hdi_encode.cpp
+++ b/codec/test/demo/idl/src/codec_hdi_encode.cpp
@@ -25,7 +25,7 @@ using namespace std;
 using namespace OHOS;
 using OHOS::sptr;
 using OHOS::HDI::Base::NativeBuffer;
-using namespace OHOS::HDI::Codec::V1_0;
+using namespace OHOS::HDI::Codec::V2_0;
 using namespace OHOS::HDI::Display::Buffer::V1_0;
 using namespace OHOS::HDI::Display::Composer::V1_0;
 #define HDF_LOG_TAG     codec_omx_hdi_enc
@@ -105,7 +105,7 @@ bool CodecHdiEncode::Init(const CommandOpt &opt)
         return false;
     }
     // Interface init
-    omxMgr_ = OHOS::HDI::Codec::V1_0::ICodecComponentManager::Get();
+    omxMgr_ = OHOS::HDI::Codec::V2_0::ICodecComponentManager::Get();
     callback_ = new CodecHdiCallback(shared_from_this());
     if ((omxMgr_ == nullptr) || (callback_ == nullptr)) {
         HDF_LOGE("%{public}s:omxMgr_ or callback_ is null", __func__);
@@ -124,7 +124,7 @@ bool CodecHdiEncode::Init(const CommandOpt &opt)
         return false;
     }
     // get version
-    struct OHOS::HDI::Codec::V1_0::CompVerInfo verInfo;
+    struct OHOS::HDI::Codec::V2_0::CompVerInfo verInfo;
     err = memset_s(&verInfo, sizeof(verInfo), 0, sizeof(verInfo));
     if (err != EOK) {
         HDF_LOGE("%{public}s: memset_s verInfo err [%{public}d].", __func__, err);
@@ -430,10 +430,10 @@ int32_t CodecHdiEncode::UseBufferOnPort(PortIndex portIndex, int bufferCount, in
         omxBuffer->pts = 0;
         omxBuffer->flag = 0;
         if (portIndex == PortIndex::PORT_INDEX_INPUT) {
-            omxBuffer->type = OHOS::HDI::Codec::V1_0::READ_ONLY_TYPE;
+            omxBuffer->type = OHOS::HDI::Codec::V2_0::READ_ONLY_TYPE;
             spSharedMem->MapReadAndWriteAshmem();
         } else {
-            omxBuffer->type = OHOS::HDI::Codec::V1_0::READ_WRITE_TYPE;
+            omxBuffer->type = OHOS::HDI::Codec::V2_0::READ_WRITE_TYPE;
             spSharedMem->MapReadOnlyAshmem();
         }
         OmxCodecBuffer outBuffer;
@@ -571,7 +571,7 @@ int CodecHdiEncode::GetFreeBufferId()
 
 int32_t CodecHdiEncode::GetComponentName(std::string &compName)
 {
-    OHOS::HDI::Codec::V1_0::AvCodecRole role = OHOS::HDI::Codec::V1_0::AvCodecRole::MEDIA_ROLETYPE_VIDEO_AVC;
+    OHOS::HDI::Codec::V2_0::AvCodecRole role = OHOS::HDI::Codec::V2_0::AvCodecRole::MEDIA_ROLETYPE_VIDEO_AVC;
     int32_t count = 0;
     auto err = omxMgr_->GetComponentNum(count);
     if (err != HDF_SUCCESS || count <= 0) {
@@ -586,7 +586,7 @@ int32_t CodecHdiEncode::GetComponentName(std::string &compName)
     }
     err = HDF_FAILURE;
     for (auto cap : caps) {
-        if (cap.type == OHOS::HDI::Codec::V1_0::CodecType::VIDEO_ENCODER && cap.role == role) {
+        if (cap.type == OHOS::HDI::Codec::V2_0::CodecType::VIDEO_ENCODER && cap.role == role) {
             compName = cap.compName;
             err = HDF_SUCCESS;
         }
@@ -698,8 +698,8 @@ int32_t CodecHdiEncode::CreateBufferHandle()
     return err;
 }
 
-int32_t CodecHdiEncode::EventHandler(OHOS::HDI::Codec::V1_0::CodecEventType event,
-    const OHOS::HDI::Codec::V1_0::EventInfo &info)
+int32_t CodecHdiEncode::EventHandler(OHOS::HDI::Codec::V2_0::CodecEventType event,
+    const OHOS::HDI::Codec::V2_0::EventInfo &info)
 {
     if (event == CODEC_EVENT_CMD_COMPLETE) {
         CodecCommandType cmd = (CodecCommandType)info.data1;
diff --git a/codec/test/fuzztest/hdi_fuzzer/codecallocatebufferhdi_fuzzer/BUILD.gn b/codec/test/fuzztest/hdi_fuzzer/codecallocatebufferhdi_fuzzer/BUILD.gn
index 96e881165..8c5cde210 100644
--- a/codec/test/fuzztest/hdi_fuzzer/codecallocatebufferhdi_fuzzer/BUILD.gn
+++ b/codec/test/fuzztest/hdi_fuzzer/codecallocatebufferhdi_fuzzer/BUILD.gn
@@ -32,7 +32,7 @@ ohos_fuzztest("CodecAllocateBufferHdiFuzzTest") {
   external_deps = [
     "c_utils:utils",
     "drivers_interface_codec:codec_idl_headers",
-    "drivers_interface_codec:libcodec_proxy_1.0",
+    "drivers_interface_codec:libcodec_proxy_2.0",
     "graphic_chipsetsdk:buffer_handle",
     "hdf_core:libhdf_host",
     "hdf_core:libhdf_ipc_adapter",
diff --git a/codec/test/fuzztest/hdi_fuzzer/codeccommonhdi_fuzzer/codeccallback_fuzzer.cpp b/codec/test/fuzztest/hdi_fuzzer/codeccommonhdi_fuzzer/codeccallback_fuzzer.cpp
index 9153314d9..2f347faf8 100644
--- a/codec/test/fuzztest/hdi_fuzzer/codeccommonhdi_fuzzer/codeccallback_fuzzer.cpp
+++ b/codec/test/fuzztest/hdi_fuzzer/codeccommonhdi_fuzzer/codeccallback_fuzzer.cpp
@@ -18,22 +18,22 @@
 
 namespace OHOS {
 namespace Codec {
-int32_t CodecCallbackFuzz::EventHandler(OHOS::HDI::Codec::V1_0::CodecEventType event,
-    const OHOS::HDI::Codec::V1_0::EventInfo &info)
+int32_t CodecCallbackFuzz::EventHandler(OHOS::HDI::Codec::V2_0::CodecEventType event,
+    const OHOS::HDI::Codec::V2_0::EventInfo &info)
 {
     (void)event;
     (void)info;
     return HDF_SUCCESS;
 }
 
-int32_t CodecCallbackFuzz::EmptyBufferDone(int64_t appData, const OHOS::HDI::Codec::V1_0::OmxCodecBuffer &buffer)
+int32_t CodecCallbackFuzz::EmptyBufferDone(int64_t appData, const OHOS::HDI::Codec::V2_0::OmxCodecBuffer &buffer)
 {
     (void)appData;
     (void)buffer;
     return HDF_SUCCESS;
 }
 
-int32_t CodecCallbackFuzz::FillBufferDone(int64_t appData, const OHOS::HDI::Codec::V1_0::OmxCodecBuffer &buffer)
+int32_t CodecCallbackFuzz::FillBufferDone(int64_t appData, const OHOS::HDI::Codec::V2_0::OmxCodecBuffer &buffer)
 {
     (void)appData;
     (void)buffer;
diff --git a/codec/test/fuzztest/hdi_fuzzer/codeccommonhdi_fuzzer/codeccallback_fuzzer.h b/codec/test/fuzztest/hdi_fuzzer/codeccommonhdi_fuzzer/codeccallback_fuzzer.h
index 4503a7820..157c42960 100644
--- a/codec/test/fuzztest/hdi_fuzzer/codeccommonhdi_fuzzer/codeccallback_fuzzer.h
+++ b/codec/test/fuzztest/hdi_fuzzer/codeccommonhdi_fuzzer/codeccallback_fuzzer.h
@@ -16,19 +16,19 @@
 #ifndef CODECCALLBACK_FUZZER_H
 #define CODECCALLBACK_FUZZER_H
 
-#include "v1_0/icodec_callback.h"
-#include "v1_0/codec_types.h"
+#include "v2_0/icodec_callback.h"
+#include "v2_0/codec_types.h"
 
 namespace OHOS {
 namespace Codec {
-class CodecCallbackFuzz : public OHOS::HDI::Codec::V1_0::ICodecCallback {
+class CodecCallbackFuzz : public OHOS::HDI::Codec::V2_0::ICodecCallback {
 public:
     CodecCallbackFuzz() = default;
     virtual ~CodecCallbackFuzz() = default;
-    int32_t EventHandler(OHOS::HDI::Codec::V1_0::CodecEventType event,
-        const OHOS::HDI::Codec::V1_0::EventInfo &info) override;
-    int32_t EmptyBufferDone(int64_t appData, const OHOS::HDI::Codec::V1_0::OmxCodecBuffer &buffer) override;
-    int32_t FillBufferDone(int64_t appData, const OHOS::HDI::Codec::V1_0::OmxCodecBuffer &buffer) override;
+    int32_t EventHandler(OHOS::HDI::Codec::V2_0::CodecEventType event,
+        const OHOS::HDI::Codec::V2_0::EventInfo &info) override;
+    int32_t EmptyBufferDone(int64_t appData, const OHOS::HDI::Codec::V2_0::OmxCodecBuffer &buffer) override;
+    int32_t FillBufferDone(int64_t appData, const OHOS::HDI::Codec::V2_0::OmxCodecBuffer &buffer) override;
 };
 } // namespace Codec
 } // namespace OHOS
diff --git a/codec/test/fuzztest/hdi_fuzzer/codeccommonhdi_fuzzer/codeccommon_fuzzer.cpp b/codec/test/fuzztest/hdi_fuzzer/codeccommonhdi_fuzzer/codeccommon_fuzzer.cpp
index 212a2cefa..72d82075e 100644
--- a/codec/test/fuzztest/hdi_fuzzer/codeccommonhdi_fuzzer/codeccommon_fuzzer.cpp
+++ b/codec/test/fuzztest/hdi_fuzzer/codeccommonhdi_fuzzer/codeccommon_fuzzer.cpp
@@ -15,7 +15,7 @@
 
 #include "codeccommon_fuzzer.h"
 
-using namespace OHOS::HDI::Codec::V1_0;
+using namespace OHOS::HDI::Codec::V2_0;
 
 namespace OHOS {
 namespace Codec {
diff --git a/codec/test/fuzztest/hdi_fuzzer/codeccommonhdi_fuzzer/codeccommon_fuzzer.h b/codec/test/fuzztest/hdi_fuzzer/codeccommonhdi_fuzzer/codeccommon_fuzzer.h
index 4d33d982e..913382eef 100644
--- a/codec/test/fuzztest/hdi_fuzzer/codeccommonhdi_fuzzer/codeccommon_fuzzer.h
+++ b/codec/test/fuzztest/hdi_fuzzer/codeccommonhdi_fuzzer/codeccommon_fuzzer.h
@@ -18,17 +18,17 @@
 
 #include <hdf_log.h>
 #include "codec_omx_ext.h"
-#include "v1_0/codec_types.h"
-#include "v1_0/icodec_component.h"
-#include "v1_0/icodec_component_manager.h"
+#include "v2_0/codec_types.h"
+#include "v2_0/icodec_component.h"
+#include "v2_0/icodec_component_manager.h"
 #include "codeccallback_fuzzer.h"
 
-using OHOS::HDI::Codec::V1_0::OmxCodecBuffer;
+using OHOS::HDI::Codec::V2_0::OmxCodecBuffer;
 namespace OHOS {
 namespace Codec {
-    inline OHOS::sptr<OHOS::HDI::Codec::V1_0::ICodecComponent> g_component;
-    inline OHOS::sptr<OHOS::HDI::Codec::V1_0::ICodecCallback> g_callback;
-    inline OHOS::sptr<OHOS::HDI::Codec::V1_0::ICodecComponentManager> g_manager;
+    inline OHOS::sptr<OHOS::HDI::Codec::V2_0::ICodecComponent> g_component;
+    inline OHOS::sptr<OHOS::HDI::Codec::V2_0::ICodecCallback> g_callback;
+    inline OHOS::sptr<OHOS::HDI::Codec::V2_0::ICodecComponentManager> g_manager;
     extern uint32_t g_componentId;
 
     void FillDataOmxCodecBuffer(struct OmxCodecBuffer *dataFuzz);
diff --git a/codec/test/fuzztest/hdi_fuzzer/codeccomponentroleenumhdi_fuzzer/BUILD.gn b/codec/test/fuzztest/hdi_fuzzer/codeccomponentroleenumhdi_fuzzer/BUILD.gn
index 7d3dc4692..a7317d18d 100644
--- a/codec/test/fuzztest/hdi_fuzzer/codeccomponentroleenumhdi_fuzzer/BUILD.gn
+++ b/codec/test/fuzztest/hdi_fuzzer/codeccomponentroleenumhdi_fuzzer/BUILD.gn
@@ -32,7 +32,7 @@ ohos_fuzztest("CodecComponentRoleEnumHdiFuzzTest") {
   external_deps = [
     "c_utils:utils",
     "drivers_interface_codec:codec_idl_headers",
-    "drivers_interface_codec:libcodec_proxy_1.0",
+    "drivers_interface_codec:libcodec_proxy_2.0",
     "graphic_chipsetsdk:buffer_handle",
     "hdf_core:libhdf_host",
     "hdf_core:libhdf_ipc_adapter",
diff --git a/codec/test/fuzztest/hdi_fuzzer/codeccomponenttunnelrequesthdi_fuzzer/BUILD.gn b/codec/test/fuzztest/hdi_fuzzer/codeccomponenttunnelrequesthdi_fuzzer/BUILD.gn
index 7e561838b..b1d188b90 100644
--- a/codec/test/fuzztest/hdi_fuzzer/codeccomponenttunnelrequesthdi_fuzzer/BUILD.gn
+++ b/codec/test/fuzztest/hdi_fuzzer/codeccomponenttunnelrequesthdi_fuzzer/BUILD.gn
@@ -31,7 +31,7 @@ ohos_fuzztest("CodecComponentTunnelRequestHdiFuzzTest") {
   external_deps = [
     "c_utils:utils",
     "drivers_interface_codec:codec_idl_headers",
-    "drivers_interface_codec:libcodec_proxy_1.0",
+    "drivers_interface_codec:libcodec_proxy_2.0",
     "graphic_chipsetsdk:buffer_handle",
     "hdf_core:libhdf_host",
     "hdf_core:libhdf_ipc_adapter",
diff --git a/codec/test/fuzztest/hdi_fuzzer/codeccomponenttunnelrequesthdi_fuzzer/codeccomponenttunnelrequest_fuzzer.cpp b/codec/test/fuzztest/hdi_fuzzer/codeccomponenttunnelrequesthdi_fuzzer/codeccomponenttunnelrequest_fuzzer.cpp
index 4a0a6a3fc..9e2679cc3 100644
--- a/codec/test/fuzztest/hdi_fuzzer/codeccomponenttunnelrequesthdi_fuzzer/codeccomponenttunnelrequest_fuzzer.cpp
+++ b/codec/test/fuzztest/hdi_fuzzer/codeccomponenttunnelrequesthdi_fuzzer/codeccomponenttunnelrequest_fuzzer.cpp
@@ -23,7 +23,7 @@ namespace {
         uint32_t port;
         int32_t tunneledComp;
         uint32_t tunneledPort;
-        struct OHOS::HDI::Codec::V1_0::CodecTunnelSetupType tunnelSetup;
+        struct OHOS::HDI::Codec::V2_0::CodecTunnelSetupType tunnelSetup;
     };
 }
 
@@ -51,8 +51,8 @@ namespace Codec {
             return false;
         }
 
-        const struct OHOS::HDI::Codec::V1_0::CodecTunnelSetupType inTunnelSetup = params.tunnelSetup;
-        struct OHOS::HDI::Codec::V1_0::CodecTunnelSetupType outTunnelSetup;
+        const struct OHOS::HDI::Codec::V2_0::CodecTunnelSetupType inTunnelSetup = params.tunnelSetup;
+        struct OHOS::HDI::Codec::V2_0::CodecTunnelSetupType outTunnelSetup;
 
         int32_t ret = g_component->ComponentTunnelRequest(params.port, params.tunneledComp,
             params.tunneledPort, inTunnelSetup, outTunnelSetup);
diff --git a/codec/test/fuzztest/hdi_fuzzer/codeccreatecomponenthdi_fuzzer/BUILD.gn b/codec/test/fuzztest/hdi_fuzzer/codeccreatecomponenthdi_fuzzer/BUILD.gn
index 8b7a6f3e7..5c87d4f07 100644
--- a/codec/test/fuzztest/hdi_fuzzer/codeccreatecomponenthdi_fuzzer/BUILD.gn
+++ b/codec/test/fuzztest/hdi_fuzzer/codeccreatecomponenthdi_fuzzer/BUILD.gn
@@ -32,7 +32,7 @@ ohos_fuzztest("CodecCreateComponentHdiFuzzTest") {
   external_deps = [
     "c_utils:utils",
     "drivers_interface_codec:codec_idl_headers",
-    "drivers_interface_codec:libcodec_proxy_1.0",
+    "drivers_interface_codec:libcodec_proxy_2.0",
     "graphic_chipsetsdk:buffer_handle",
     "hdf_core:libhdf_host",
     "hdf_core:libhdf_ipc_adapter",
diff --git a/codec/test/fuzztest/hdi_fuzzer/codeccreatecomponenthdi_fuzzer/codeccreatecomponent_fuzzer.cpp b/codec/test/fuzztest/hdi_fuzzer/codeccreatecomponenthdi_fuzzer/codeccreatecomponent_fuzzer.cpp
index 75e2c1dab..0aa2f7426 100644
--- a/codec/test/fuzztest/hdi_fuzzer/codeccreatecomponenthdi_fuzzer/codeccreatecomponent_fuzzer.cpp
+++ b/codec/test/fuzztest/hdi_fuzzer/codeccreatecomponenthdi_fuzzer/codeccreatecomponent_fuzzer.cpp
@@ -16,7 +16,7 @@
 #include "codeccreatecomponent_fuzzer.h"
 #include "codeccommon_fuzzer.h"
 
-using namespace OHOS::HDI::Codec::V1_0;
+using namespace OHOS::HDI::Codec::V2_0;
 
 namespace OHOS {
 namespace Codec {
@@ -26,9 +26,9 @@ namespace Codec {
             return false;
         }
         
-        OHOS::sptr<OHOS::HDI::Codec::V1_0::ICodecComponent> client_ = nullptr;
-        OHOS::sptr<OHOS::HDI::Codec::V1_0::ICodecCallback> callback_ = nullptr;
-        OHOS::sptr<OHOS::HDI::Codec::V1_0::ICodecComponentManager> omxMgr_ = nullptr;
+        OHOS::sptr<OHOS::HDI::Codec::V2_0::ICodecComponent> client_ = nullptr;
+        OHOS::sptr<OHOS::HDI::Codec::V2_0::ICodecCallback> callback_ = nullptr;
+        OHOS::sptr<OHOS::HDI::Codec::V2_0::ICodecComponentManager> omxMgr_ = nullptr;
         uint32_t g_componentId = 0;
         
         omxMgr_ = ICodecComponentManager::Get(false);
diff --git a/codec/test/fuzztest/hdi_fuzzer/codecfreebufferhdi_fuzzer/BUILD.gn b/codec/test/fuzztest/hdi_fuzzer/codecfreebufferhdi_fuzzer/BUILD.gn
index 19810d130..4795b307b 100644
--- a/codec/test/fuzztest/hdi_fuzzer/codecfreebufferhdi_fuzzer/BUILD.gn
+++ b/codec/test/fuzztest/hdi_fuzzer/codecfreebufferhdi_fuzzer/BUILD.gn
@@ -32,7 +32,7 @@ ohos_fuzztest("CodecFreeBufferHdiFuzzTest") {
   external_deps = [
     "c_utils:utils",
     "drivers_interface_codec:codec_idl_headers",
-    "drivers_interface_codec:libcodec_proxy_1.0",
+    "drivers_interface_codec:libcodec_proxy_2.0",
     "graphic_chipsetsdk:buffer_handle",
     "hdf_core:libhdf_host",
     "hdf_core:libhdf_ipc_adapter",
diff --git a/codec/test/fuzztest/hdi_fuzzer/codecgetcomponentcapabilitylisthdi_fuzzer/BUILD.gn b/codec/test/fuzztest/hdi_fuzzer/codecgetcomponentcapabilitylisthdi_fuzzer/BUILD.gn
index 58f745a7f..6635362b8 100644
--- a/codec/test/fuzztest/hdi_fuzzer/codecgetcomponentcapabilitylisthdi_fuzzer/BUILD.gn
+++ b/codec/test/fuzztest/hdi_fuzzer/codecgetcomponentcapabilitylisthdi_fuzzer/BUILD.gn
@@ -31,7 +31,7 @@ ohos_fuzztest("CodecGetComponentCapabilityListHdiFuzzTest") {
   external_deps = [
     "c_utils:utils",
     "drivers_interface_codec:codec_idl_headers",
-    "drivers_interface_codec:libcodec_proxy_1.0",
+    "drivers_interface_codec:libcodec_proxy_2.0",
     "graphic_chipsetsdk:buffer_handle",
     "hdf_core:libhdf_host",
     "hdf_core:libhdf_ipc_adapter",
diff --git a/codec/test/fuzztest/hdi_fuzzer/codecgetcomponentcapabilitylisthdi_fuzzer/codecgetcomponentcapabilitylist_fuzzer.cpp b/codec/test/fuzztest/hdi_fuzzer/codecgetcomponentcapabilitylisthdi_fuzzer/codecgetcomponentcapabilitylist_fuzzer.cpp
index 91e3cd076..c25b9841a 100644
--- a/codec/test/fuzztest/hdi_fuzzer/codecgetcomponentcapabilitylisthdi_fuzzer/codecgetcomponentcapabilitylist_fuzzer.cpp
+++ b/codec/test/fuzztest/hdi_fuzzer/codecgetcomponentcapabilitylisthdi_fuzzer/codecgetcomponentcapabilitylist_fuzzer.cpp
@@ -16,7 +16,7 @@
 #include "codecgetcomponentcapabilitylist_fuzzer.h"
 #include "codeccommon_fuzzer.h"
 
-using namespace OHOS::HDI::Codec::V1_0;
+using namespace OHOS::HDI::Codec::V2_0;
 
 namespace OHOS {
 namespace Codec {
@@ -26,7 +26,7 @@ namespace Codec {
             return false;
         }
 
-        OHOS::sptr<OHOS::HDI::Codec::V1_0::ICodecComponentManager> omxMgr_ = nullptr;
+        OHOS::sptr<OHOS::HDI::Codec::V2_0::ICodecComponentManager> omxMgr_ = nullptr;
 
         omxMgr_ = ICodecComponentManager::Get(false);
         if (omxMgr_ == nullptr) {
diff --git a/codec/test/fuzztest/hdi_fuzzer/codecgetconfighdi_fuzzer/BUILD.gn b/codec/test/fuzztest/hdi_fuzzer/codecgetconfighdi_fuzzer/BUILD.gn
index 59387a7bf..446bc5b95 100644
--- a/codec/test/fuzztest/hdi_fuzzer/codecgetconfighdi_fuzzer/BUILD.gn
+++ b/codec/test/fuzztest/hdi_fuzzer/codecgetconfighdi_fuzzer/BUILD.gn
@@ -32,7 +32,7 @@ ohos_fuzztest("CodecGetConfigHdiFuzzTest") {
   external_deps = [
     "c_utils:utils",
     "drivers_interface_codec:codec_idl_headers",
-    "drivers_interface_codec:libcodec_proxy_1.0",
+    "drivers_interface_codec:libcodec_proxy_2.0",
     "graphic_chipsetsdk:buffer_handle",
     "hdf_core:libhdf_host",
     "hdf_core:libhdf_ipc_adapter",
diff --git a/codec/test/fuzztest/hdi_fuzzer/codecgetextensionIndexhdi_fuzzer/BUILD.gn b/codec/test/fuzztest/hdi_fuzzer/codecgetextensionIndexhdi_fuzzer/BUILD.gn
index 96ffaf7ee..4154d7995 100644
--- a/codec/test/fuzztest/hdi_fuzzer/codecgetextensionIndexhdi_fuzzer/BUILD.gn
+++ b/codec/test/fuzztest/hdi_fuzzer/codecgetextensionIndexhdi_fuzzer/BUILD.gn
@@ -32,7 +32,7 @@ ohos_fuzztest("CodecGetExtensionIndexHdiFuzzTest") {
   external_deps = [
     "c_utils:utils",
     "drivers_interface_codec:codec_idl_headers",
-    "drivers_interface_codec:libcodec_proxy_1.0",
+    "drivers_interface_codec:libcodec_proxy_2.0",
     "graphic_chipsetsdk:buffer_handle",
     "hdf_core:libhdf_host",
     "hdf_core:libhdf_ipc_adapter",
diff --git a/codec/test/fuzztest/hdi_fuzzer/codecgetparameterhdi_fuzzer/BUILD.gn b/codec/test/fuzztest/hdi_fuzzer/codecgetparameterhdi_fuzzer/BUILD.gn
index c43076592..ed33a2153 100644
--- a/codec/test/fuzztest/hdi_fuzzer/codecgetparameterhdi_fuzzer/BUILD.gn
+++ b/codec/test/fuzztest/hdi_fuzzer/codecgetparameterhdi_fuzzer/BUILD.gn
@@ -32,7 +32,7 @@ ohos_fuzztest("CodecGetParameterHdiFuzzTest") {
   external_deps = [
     "c_utils:utils",
     "drivers_interface_codec:codec_idl_headers",
-    "drivers_interface_codec:libcodec_proxy_1.0",
+    "drivers_interface_codec:libcodec_proxy_2.0",
     "graphic_chipsetsdk:buffer_handle",
     "hdf_core:libhdf_host",
     "hdf_core:libhdf_ipc_adapter",
diff --git a/codec/test/fuzztest/hdi_fuzzer/codechdi_fuzzer/BUILD.gn b/codec/test/fuzztest/hdi_fuzzer/codechdi_fuzzer/BUILD.gn
index 5f8a079be..7f1e4d05c 100644
--- a/codec/test/fuzztest/hdi_fuzzer/codechdi_fuzzer/BUILD.gn
+++ b/codec/test/fuzztest/hdi_fuzzer/codechdi_fuzzer/BUILD.gn
@@ -33,7 +33,7 @@ ohos_fuzztest("CodecHdiFuzzTest") {
   external_deps = [
     "c_utils:utils",
     "drivers_interface_codec:codec_idl_headers",
-    "drivers_interface_codec:libcodec_stub_1.0",
+    "drivers_interface_codec:libcodec_stub_2.0",
     "hdf_core:libhdf_ipc_adapter",
     "hdf_core:libhdf_utils",
     "hdf_core:libhdi",
diff --git a/codec/test/fuzztest/hdi_fuzzer/codechdi_fuzzer/codec_fuzzer.cpp b/codec/test/fuzztest/hdi_fuzzer/codechdi_fuzzer/codec_fuzzer.cpp
index ad4db36a2..71773cce2 100644
--- a/codec/test/fuzztest/hdi_fuzzer/codechdi_fuzzer/codec_fuzzer.cpp
+++ b/codec/test/fuzztest/hdi_fuzzer/codechdi_fuzzer/codec_fuzzer.cpp
@@ -17,14 +17,14 @@
 #include <cstddef>
 #include <cstdint>
 #include "hdf_log.h"
-#include "v1_0/codec_component_manager_stub.h"
+#include "v2_0/codec_component_manager_stub.h"
 
-using namespace OHOS::HDI::Codec::V1_0;
+using namespace OHOS::HDI::Codec::V2_0;
 
 namespace OHOS {
 constexpr size_t THRESHOLD = 10;
 constexpr int32_t OFFSET = 4;
-const std::u16string CODEC_INTERFACE_TOKEN = u"ohos.hdi.codec.v1_0.ICodecComponentManager";
+const std::u16string CODEC_INTERFACE_TOKEN = u"ohos.hdi.codec.V2_0.ICodecComponentManager";
 #define CMD_CODEC_COMPONENT_MANAGER_GREATE_COMPONENT 3
 
 uint32_t Convert2Uint32(const uint8_t* ptr)
diff --git a/codec/test/fuzztest/hdi_fuzzer/codecsendcommandhdi_fuzzer/BUILD.gn b/codec/test/fuzztest/hdi_fuzzer/codecsendcommandhdi_fuzzer/BUILD.gn
index 781673976..cbf4413a2 100644
--- a/codec/test/fuzztest/hdi_fuzzer/codecsendcommandhdi_fuzzer/BUILD.gn
+++ b/codec/test/fuzztest/hdi_fuzzer/codecsendcommandhdi_fuzzer/BUILD.gn
@@ -32,7 +32,7 @@ ohos_fuzztest("CodecSendCommandHdiFuzzTest") {
   external_deps = [
     "c_utils:utils",
     "drivers_interface_codec:codec_idl_headers",
-    "drivers_interface_codec:libcodec_proxy_1.0",
+    "drivers_interface_codec:libcodec_proxy_2.0",
     "graphic_chipsetsdk:buffer_handle",
     "hdf_core:libhdf_host",
     "hdf_core:libhdf_ipc_adapter",
diff --git a/codec/test/fuzztest/hdi_fuzzer/codecsendcommandhdi_fuzzer/codecsendcommand_fuzzer.cpp b/codec/test/fuzztest/hdi_fuzzer/codecsendcommandhdi_fuzzer/codecsendcommand_fuzzer.cpp
index 3651961fe..6fdce8660 100644
--- a/codec/test/fuzztest/hdi_fuzzer/codecsendcommandhdi_fuzzer/codecsendcommand_fuzzer.cpp
+++ b/codec/test/fuzztest/hdi_fuzzer/codecsendcommandhdi_fuzzer/codecsendcommand_fuzzer.cpp
@@ -19,9 +19,9 @@
 #include <securec.h>
 #include <unistd.h>
 
-using namespace OHOS::HDI::Codec::V1_0;
-using OHOS::HDI::Codec::V1_0::CodecCommandType;
-using OHOS::HDI::Codec::V1_0::CodecStateType;
+using namespace OHOS::HDI::Codec::V2_0;
+using OHOS::HDI::Codec::V2_0::CodecCommandType;
+using OHOS::HDI::Codec::V2_0::CodecStateType;
 
 namespace {
     struct AllParameters {
diff --git a/codec/test/fuzztest/hdi_fuzzer/codecsetcallbackshdi_fuzzer/BUILD.gn b/codec/test/fuzztest/hdi_fuzzer/codecsetcallbackshdi_fuzzer/BUILD.gn
index 51f189bf9..e188333c4 100644
--- a/codec/test/fuzztest/hdi_fuzzer/codecsetcallbackshdi_fuzzer/BUILD.gn
+++ b/codec/test/fuzztest/hdi_fuzzer/codecsetcallbackshdi_fuzzer/BUILD.gn
@@ -32,7 +32,7 @@ ohos_fuzztest("CodecSetCallbacksHdiFuzzTest") {
   external_deps = [
     "c_utils:utils",
     "drivers_interface_codec:codec_idl_headers",
-    "drivers_interface_codec:libcodec_proxy_1.0",
+    "drivers_interface_codec:libcodec_proxy_2.0",
     "graphic_chipsetsdk:buffer_handle",
     "hdf_core:libhdf_host",
     "hdf_core:libhdf_ipc_adapter",
diff --git a/codec/test/fuzztest/hdi_fuzzer/codecsetconfighdi_fuzzer/BUILD.gn b/codec/test/fuzztest/hdi_fuzzer/codecsetconfighdi_fuzzer/BUILD.gn
index a2fcb6527..4ed29b79b 100644
--- a/codec/test/fuzztest/hdi_fuzzer/codecsetconfighdi_fuzzer/BUILD.gn
+++ b/codec/test/fuzztest/hdi_fuzzer/codecsetconfighdi_fuzzer/BUILD.gn
@@ -32,7 +32,7 @@ ohos_fuzztest("CodecSetConfigHdiFuzzTest") {
   external_deps = [
     "c_utils:utils",
     "drivers_interface_codec:codec_idl_headers",
-    "drivers_interface_codec:libcodec_proxy_1.0",
+    "drivers_interface_codec:libcodec_proxy_2.0",
     "graphic_chipsetsdk:buffer_handle",
     "hdf_core:libhdf_host",
     "hdf_core:libhdf_ipc_adapter",
diff --git a/codec/test/fuzztest/hdi_fuzzer/codecsetparameterhdi_fuzzer/BUILD.gn b/codec/test/fuzztest/hdi_fuzzer/codecsetparameterhdi_fuzzer/BUILD.gn
index 75a94a367..38aef6bb9 100644
--- a/codec/test/fuzztest/hdi_fuzzer/codecsetparameterhdi_fuzzer/BUILD.gn
+++ b/codec/test/fuzztest/hdi_fuzzer/codecsetparameterhdi_fuzzer/BUILD.gn
@@ -32,7 +32,7 @@ ohos_fuzztest("CodecSetParameterHdiFuzzTest") {
   external_deps = [
     "c_utils:utils",
     "drivers_interface_codec:codec_idl_headers",
-    "drivers_interface_codec:libcodec_proxy_1.0",
+    "drivers_interface_codec:libcodec_proxy_2.0",
     "graphic_chipsetsdk:buffer_handle",
     "hdf_core:libhdf_host",
     "hdf_core:libhdf_ipc_adapter",
diff --git a/codec/test/fuzztest/hdi_fuzzer/codecusebufferhdi_fuzzer/BUILD.gn b/codec/test/fuzztest/hdi_fuzzer/codecusebufferhdi_fuzzer/BUILD.gn
index 4c71aec54..4bbfe145f 100644
--- a/codec/test/fuzztest/hdi_fuzzer/codecusebufferhdi_fuzzer/BUILD.gn
+++ b/codec/test/fuzztest/hdi_fuzzer/codecusebufferhdi_fuzzer/BUILD.gn
@@ -32,7 +32,7 @@ ohos_fuzztest("CodecUseBufferHdiFuzzTest") {
   external_deps = [
     "c_utils:utils",
     "drivers_interface_codec:codec_idl_headers",
-    "drivers_interface_codec:libcodec_proxy_1.0",
+    "drivers_interface_codec:libcodec_proxy_2.0",
     "graphic_chipsetsdk:buffer_handle",
     "hdf_core:libhdf_host",
     "hdf_core:libhdf_ipc_adapter",
diff --git a/codec/test/fuzztest/hdi_fuzzer/codecuseeglimagehdi_fuzzer/BUILD.gn b/codec/test/fuzztest/hdi_fuzzer/codecuseeglimagehdi_fuzzer/BUILD.gn
index ac209f85d..9b96299aa 100644
--- a/codec/test/fuzztest/hdi_fuzzer/codecuseeglimagehdi_fuzzer/BUILD.gn
+++ b/codec/test/fuzztest/hdi_fuzzer/codecuseeglimagehdi_fuzzer/BUILD.gn
@@ -32,7 +32,7 @@ ohos_fuzztest("CodecUseEglImageHdiFuzzTest") {
   external_deps = [
     "c_utils:utils",
     "drivers_interface_codec:codec_idl_headers",
-    "drivers_interface_codec:libcodec_proxy_1.0",
+    "drivers_interface_codec:libcodec_proxy_2.0",
     "graphic_chipsetsdk:buffer_handle",
     "hdf_core:libhdf_host",
     "hdf_core:libhdf_ipc_adapter",
diff --git a/codec/test/unittest/idl_omx/BUILD.gn b/codec/test/unittest/idl_omx/BUILD.gn
index 62759df8d..b440d43a9 100644
--- a/codec/test/unittest/idl_omx/BUILD.gn
+++ b/codec/test/unittest/idl_omx/BUILD.gn
@@ -34,7 +34,7 @@ ohos_unittest("codec_idl_omx_test") {
     external_deps = [
       "c_utils:utils",
       "drivers_interface_codec:codec_idl_headers",
-      "drivers_interface_codec:libcodec_proxy_1.0",
+      "drivers_interface_codec:libcodec_proxy_2.0",
       "drivers_interface_display:display_buffer_idl_headers",
       "drivers_interface_display:display_composer_idl_headers",
       "drivers_interface_display:libdisplay_buffer_hdi_impl",
diff --git a/codec/test/unittest/idl_omx/codec_callback_service.cpp b/codec/test/unittest/idl_omx/codec_callback_service.cpp
index b95b7ebe2..27d963820 100644
--- a/codec/test/unittest/idl_omx/codec_callback_service.cpp
+++ b/codec/test/unittest/idl_omx/codec_callback_service.cpp
@@ -13,13 +13,13 @@
  * limitations under the License.
  */
 
-#include "v1_0/codec_callback_service.h"
+#include "v2_0/codec_callback_service.h"
 #include <hdf_base.h>
 
 namespace OHOS {
 namespace HDI {
 namespace Codec {
-namespace V1_0 {
+namespace V2_0 {
 int32_t CodecCallbackService::EventHandler(CodecEventType event, const EventInfo &info)
 {
     (void)event;
@@ -40,7 +40,7 @@ int32_t CodecCallbackService::FillBufferDone(int64_t appData, const OmxCodecBuff
     (void)buffer;
     return HDF_SUCCESS;
 }
-} // V1_0
+} // V2_0
 } // Codec
 } // HDI
 } // OHOS
diff --git a/codec/test/unittest/idl_omx/codec_function_utils.cpp b/codec/test/unittest/idl_omx/codec_function_utils.cpp
index b4e0fd0b4..9f72c5067 100644
--- a/codec/test/unittest/idl_omx/codec_function_utils.cpp
+++ b/codec/test/unittest/idl_omx/codec_function_utils.cpp
@@ -26,7 +26,7 @@
 #define ERR_PORT_INDEX_2 10000
 
 using namespace std;
-using namespace OHOS::HDI::Codec::V1_0;
+using namespace OHOS::HDI::Codec::V2_0;
 using namespace OHOS::HDI::Display::Buffer::V1_0;
 using namespace OHOS::HDI::Display::Composer::V1_0;
 IDisplayBuffer *FunctionUtil::buffer_ = nullptr;
diff --git a/codec/test/unittest/idl_omx/codec_function_utils.h b/codec/test/unittest/idl_omx/codec_function_utils.h
index 08998e65b..6cfb30695 100644
--- a/codec/test/unittest/idl_omx/codec_function_utils.h
+++ b/codec/test/unittest/idl_omx/codec_function_utils.h
@@ -25,9 +25,9 @@
 #include <securec.h>
 #include "hdf_log.h"
 #include "codec_omx_ext.h"
-#include "v1_0/codec_callback_service.h"
-#include "v1_0/icodec_component.h"
-#include "v1_0/icodec_component_manager.h"
+#include "v2_0/codec_callback_service.h"
+#include "v2_0/icodec_component.h"
+#include "v2_0/icodec_component_manager.h"
 #include "v1_0/display_composer_type.h"
 #include "v1_0/display_buffer_type.h"
 #include "v1_0/include/idisplay_buffer.h"
@@ -50,7 +50,7 @@ constexpr uint32_t ALIGNMENT = 16;
 namespace OHOS {
 namespace HDI {
 namespace Codec {
-namespace V1_0 {
+namespace V2_0 {
 enum class PortIndex { INDEX_INPUT = 0, INDEX_OUTPUT = 1 };
 class FunctionUtil : public RefBase {
     struct BufferInfo {
@@ -154,7 +154,7 @@ private:
     std::map<int32_t, std::shared_ptr<BufferInfo>> inputBuffers_;
     std::map<int32_t, std::shared_ptr<BufferInfo>> outputBuffers_;
 };
-} // V1_0
+} // V2_0
 } // Codec
 } // HDI
 } // OHOS
diff --git a/codec/test/unittest/idl_omx/codec_hdi_manager_test.cpp b/codec/test/unittest/idl_omx/codec_hdi_manager_test.cpp
index ca32dd438..628d3917a 100644
--- a/codec/test/unittest/idl_omx/codec_hdi_manager_test.cpp
+++ b/codec/test/unittest/idl_omx/codec_hdi_manager_test.cpp
@@ -14,13 +14,13 @@
  */
 
 #include <gtest/gtest.h>
-#include "v1_0/codec_callback_service.h"
-#include "v1_0/icodec_callback.h"
-#include "v1_0/icodec_component_manager.h"
+#include "v2_0/codec_callback_service.h"
+#include "v2_0/icodec_callback.h"
+#include "v2_0/icodec_component_manager.h"
 using namespace std;
 using namespace testing::ext;
 using OHOS::sptr;
-using namespace OHOS::HDI::Codec::V1_0;
+using namespace OHOS::HDI::Codec::V2_0;
 constexpr int64_t APP_DATA = 3;
 constexpr uint32_t INVALID_COMPONENT_ID = -1;
 namespace {
diff --git a/codec/test/unittest/idl_omx/codec_hdi_omx_dec_test.cpp b/codec/test/unittest/idl_omx/codec_hdi_omx_dec_test.cpp
index bcb30edc0..8c827eb7f 100644
--- a/codec/test/unittest/idl_omx/codec_hdi_omx_dec_test.cpp
+++ b/codec/test/unittest/idl_omx/codec_hdi_omx_dec_test.cpp
@@ -19,7 +19,7 @@
 #include <servmgr_hdi.h>
 #include <vector>
 #include "codec_function_utils.h"
-#include "v1_0/codec_callback_service.h"
+#include "v2_0/codec_callback_service.h"
 
 #define ERR_STATE_TYPE (100)
 #define ERR_COUNT (-1)
@@ -29,7 +29,7 @@ using namespace std;
 using namespace testing::ext;
 using OHOS::sptr;
 using OHOS::HDI::Base::NativeBuffer;
-using namespace OHOS::HDI::Codec::V1_0;
+using namespace OHOS::HDI::Codec::V2_0;
 using namespace OHOS::HDI::Display::Buffer::V1_0;
 using namespace OHOS::HDI::Display::Composer::V1_0;
 
@@ -39,7 +39,7 @@ constexpr AvCodecRole ROLE = MEDIA_ROLETYPE_VIDEO_AVC;
 static sptr<ICodecComponent> g_component = nullptr;
 static sptr<ICodecCallback> g_callback = nullptr;
 static sptr<ICodecComponentManager> g_manager = nullptr;
-static OHOS::HDI::Codec::V1_0::CodecVersionType g_version;
+static OHOS::HDI::Codec::V2_0::CodecVersionType g_version;
 static std::string g_compName = "";
 
 class CodecHdiOmxDecTest : public testing::Test {
diff --git a/codec/test/unittest/idl_omx/codec_hdi_omx_enc_test.cpp b/codec/test/unittest/idl_omx/codec_hdi_omx_enc_test.cpp
index 266483383..69a76777f 100644
--- a/codec/test/unittest/idl_omx/codec_hdi_omx_enc_test.cpp
+++ b/codec/test/unittest/idl_omx/codec_hdi_omx_enc_test.cpp
@@ -18,7 +18,7 @@
 #include <servmgr_hdi.h>
 #include <vector>
 #include "codec_function_utils.h"
-#include "v1_0/codec_callback_service.h"
+#include "v2_0/codec_callback_service.h"
 
 #define ERR_COUNT (-1)
 
@@ -26,7 +26,7 @@ using namespace std;
 using namespace testing::ext;
 using OHOS::sptr;
 using OHOS::HDI::Base::NativeBuffer;
-using namespace OHOS::HDI::Codec::V1_0;
+using namespace OHOS::HDI::Codec::V2_0;
 using namespace OHOS::HDI::Display::Buffer::V1_0;
 using namespace OHOS::HDI::Display::Composer::V1_0;
 
@@ -36,7 +36,7 @@ constexpr AvCodecRole ROLE = MEDIA_ROLETYPE_VIDEO_AVC;
 static sptr<ICodecComponent> g_component = nullptr;
 static sptr<ICodecCallback> g_callback = nullptr;
 static sptr<ICodecComponentManager> g_manager = nullptr;
-static OHOS::HDI::Codec::V1_0::CodecVersionType g_version;
+static OHOS::HDI::Codec::V2_0::CodecVersionType g_version;
 static std::string g_compName = "";
 
 class CodecHdiOmxEncTest : public testing::Test {
@@ -455,8 +455,8 @@ HWTEST_F(CodecHdiOmxEncTest, HdfCodecHdiTunnelRequestTest_001, TestSize.Level1)
     ASSERT_TRUE(g_component != nullptr);
     const int32_t tunneledComp = 1002;
     const uint32_t tunneledPort = 101;
-    OHOS::HDI::Codec::V1_0::CodecTunnelSetupType tunnelSetup;
-    tunnelSetup.supplier = OHOS::HDI::Codec::V1_0::CODEC_BUFFER_SUPPLY_INPUT;
+    OHOS::HDI::Codec::V2_0::CodecTunnelSetupType tunnelSetup;
+    tunnelSetup.supplier = OHOS::HDI::Codec::V2_0::CODEC_BUFFER_SUPPLY_INPUT;
 
     auto ret = g_component->ComponentTunnelRequest(outputIndex, tunneledComp, tunneledPort,
         tunnelSetup, tunnelSetup);
