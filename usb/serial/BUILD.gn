# Copyright (c) 2021-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/config/components/hdi/hdi.gni")
import("//build/ohos.gni")
import("./../usb.gni")
import("./serial.gni")

# group("usbhost_acm") {
#   deps = [ ":libusbhost_acm" ]
# }
config("serial_public_config") {
  include_dirs = [
    "${usb_driver_path}/serial",
    "include",
    "${usb_driver_path}/utils/include",
    "${usb_driver_path}/ddk/host/include",
    "${usb_driver_path}/hdi_service/include",
    "${usb_driver_path}/hdf_usb/include",
    "${usb_driver_path}/hdi_service",
    "${usb_driver_path}/utils/include",
  ]
}

ohos_shared_library("libusbhost_acm") {
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  branch_protector_ret = "pac_ret"

  sources = [ "src/usb_serial.c" ]

  include_dirs = [
    "./../ddk/common/include",
    "./../ddk/host/include",
    "./../interfaces/ddk/common",
    "./../interfaces/ddk/host",
    "./../gadget/function/include",
    "//drivers/hdf_core/framework/model/usb/include",
    "include",
    "${usb_driver_path}/utils/include",
  ]

  deps = [ "./../ddk:libusb_ddk_host" ]

  if (is_standard_system) {
    external_deps = [
      "hdf_core:libhdf_host",
      "hdf_core:libhdf_utils",
      "hilog:libhilog",
    ]

    if (usb_c_utils_enable) {
      external_deps += [ "c_utils:utils" ]
    }
  } else {
    external_deps = [ "hilog:libhilog" ]
  }

  shlib_type = "hdi"
  install_images = [ chipset_base_dir ]
  subsystem_name = "hdf"
  part_name = "drivers_peripheral_usb"
}

ohos_shared_library("libusbhost_acm_rawapi") {
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  branch_protector_ret = "pac_ret"

  sources = [ "src/usb_serial_rawapi.c" ]

  include_dirs = [
    "./../ddk/common/include",
    "./../usb/ddk/host/include",
    "./../gadget/function/include",
    "./../interfaces/ddk/common",
    "./../interfaces/ddk/host",
    "//drivers/hdf_core/framework/model/usb/include",
    "include",
    "${usb_driver_path}/utils/include",
  ]

  deps = [ "./../ddk:libusb_ddk_host" ]

  if (is_standard_system) {
    external_deps = [
      "hdf_core:libhdf_host",
      "hdf_core:libhdf_utils",
      "hilog:libhilog",
    ]
    if (usb_hisysevent_enable) {
      external_deps += [ "hisysevent:libhisysevent" ]

      if (defined(defines)) {
        defines += [ "USB_ENABLE_HISYSEVENT" ]
      } else {
        defines = [ "USB_ENABLE_HISYSEVENT" ]
      }
    }
    if (usb_c_utils_enable) {
      external_deps += [ "c_utils:utils" ]
    }
  } else {
    external_deps = [ "hilog:libhilog" ]
  }

  shlib_type = "hdi"
  install_images = [ chipset_base_dir ]
  subsystem_name = "hdf"
  part_name = "drivers_peripheral_usb"
}

ohos_shared_library("libserial_interface_service_1.0") {
  version_script = "serial_interface_service.map"
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  branch_protector_ret = "pac_ret"

  sources = [ "src/serial_impl.cpp" ]
  defines = []
  if (linux_serial_enable == true) {
    sources += [ "src/linux_serial.cpp" ]
    defines += [ "LINUX_SERIAL" ]
    deps = [
      "${usb_driver_path}/ddk:libusb_ddk_host",
      "${usb_driver_path}/ddk:libusb_pnp_manager",
    ]
  } else {
    sources += [ "src/libusb_serial.cpp" ]
  }

  shlib_type = "hdi"

  public_configs = [ ":serial_public_config" ]

  if (is_standard_system) {
    external_deps = [
      "drivers_interface_usb:libserial_proxy_1.0",
      "drivers_interface_usb:libserial_stub_1.0",
      "hdf_core:libhdf_host",
      "hdf_core:libhdf_utils",
      "hdf_core:libhdi",
      "hilog:libhilog",
      "hisysevent:libhisysevent",
      "hitrace:hitrace_meter",
      "init:libbegetutil",
      "libusb:libusb",
    ]
    if (usb_c_utils_enable) {
      external_deps += [ "c_utils:utils" ]
    }
  } else {
    external_deps = [
      "drivers_interface_usb:libserial_proxy_1.0",
      "drivers_interface_usb:libserial_stub_1.0",
      "hilog:libhilog",
      "libusb:libusb",
    ]
  }

  subsystem_name = "hdf"
  part_name = "drivers_peripheral_usb"
}

group("usbhost_acm") {
  deps = [
    ":libserial_interface_service_1.0",
    ":libusbhost_acm",
    ":libusbhost_acm_rawapi",
  ]
}
